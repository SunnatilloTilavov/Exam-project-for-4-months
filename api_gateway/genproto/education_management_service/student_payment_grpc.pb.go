// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: student_payment.proto

package education_management_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StudentPaymentService_GetByID_FullMethodName = "/education_management_service.StudentPaymentService/GetByID"
	StudentPaymentService_GetList_FullMethodName = "/education_management_service.StudentPaymentService/GetList"
	StudentPaymentService_Create_FullMethodName  = "/education_management_service.StudentPaymentService/Create"
	StudentPaymentService_Update_FullMethodName  = "/education_management_service.StudentPaymentService/Update"
	StudentPaymentService_Delete_FullMethodName  = "/education_management_service.StudentPaymentService/Delete"
)

// StudentPaymentServiceClient is the client API for StudentPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentPaymentServiceClient interface {
	GetByID(ctx context.Context, in *StudentPaymentID, opts ...grpc.CallOption) (*GetStudentPaymentResponse, error)
	GetList(ctx context.Context, in *GetListStudentPaymentRequest, opts ...grpc.CallOption) (*GetListStudentPaymentResponse, error)
	Create(ctx context.Context, in *CreateStudentPaymentRequest, opts ...grpc.CallOption) (*StudentPaymentResponse, error)
	Update(ctx context.Context, in *UpdateStudentPaymentRequest, opts ...grpc.CallOption) (*GetStudentPaymentResponse, error)
	Delete(ctx context.Context, in *StudentPaymentID, opts ...grpc.CallOption) (*StudentPaymentEmpty, error)
}

type studentPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentPaymentServiceClient(cc grpc.ClientConnInterface) StudentPaymentServiceClient {
	return &studentPaymentServiceClient{cc}
}

func (c *studentPaymentServiceClient) GetByID(ctx context.Context, in *StudentPaymentID, opts ...grpc.CallOption) (*GetStudentPaymentResponse, error) {
	out := new(GetStudentPaymentResponse)
	err := c.cc.Invoke(ctx, StudentPaymentService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPaymentServiceClient) GetList(ctx context.Context, in *GetListStudentPaymentRequest, opts ...grpc.CallOption) (*GetListStudentPaymentResponse, error) {
	out := new(GetListStudentPaymentResponse)
	err := c.cc.Invoke(ctx, StudentPaymentService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPaymentServiceClient) Create(ctx context.Context, in *CreateStudentPaymentRequest, opts ...grpc.CallOption) (*StudentPaymentResponse, error) {
	out := new(StudentPaymentResponse)
	err := c.cc.Invoke(ctx, StudentPaymentService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPaymentServiceClient) Update(ctx context.Context, in *UpdateStudentPaymentRequest, opts ...grpc.CallOption) (*GetStudentPaymentResponse, error) {
	out := new(GetStudentPaymentResponse)
	err := c.cc.Invoke(ctx, StudentPaymentService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPaymentServiceClient) Delete(ctx context.Context, in *StudentPaymentID, opts ...grpc.CallOption) (*StudentPaymentEmpty, error) {
	out := new(StudentPaymentEmpty)
	err := c.cc.Invoke(ctx, StudentPaymentService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentPaymentServiceServer is the server API for StudentPaymentService service.
// All implementations must embed UnimplementedStudentPaymentServiceServer
// for forward compatibility
type StudentPaymentServiceServer interface {
	GetByID(context.Context, *StudentPaymentID) (*GetStudentPaymentResponse, error)
	GetList(context.Context, *GetListStudentPaymentRequest) (*GetListStudentPaymentResponse, error)
	Create(context.Context, *CreateStudentPaymentRequest) (*StudentPaymentResponse, error)
	Update(context.Context, *UpdateStudentPaymentRequest) (*GetStudentPaymentResponse, error)
	Delete(context.Context, *StudentPaymentID) (*StudentPaymentEmpty, error)
	mustEmbedUnimplementedStudentPaymentServiceServer()
}

// UnimplementedStudentPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentPaymentServiceServer struct {
}

func (UnimplementedStudentPaymentServiceServer) GetByID(context.Context, *StudentPaymentID) (*GetStudentPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedStudentPaymentServiceServer) GetList(context.Context, *GetListStudentPaymentRequest) (*GetListStudentPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedStudentPaymentServiceServer) Create(context.Context, *CreateStudentPaymentRequest) (*StudentPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStudentPaymentServiceServer) Update(context.Context, *UpdateStudentPaymentRequest) (*GetStudentPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStudentPaymentServiceServer) Delete(context.Context, *StudentPaymentID) (*StudentPaymentEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStudentPaymentServiceServer) mustEmbedUnimplementedStudentPaymentServiceServer() {}

// UnsafeStudentPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentPaymentServiceServer will
// result in compilation errors.
type UnsafeStudentPaymentServiceServer interface {
	mustEmbedUnimplementedStudentPaymentServiceServer()
}

func RegisterStudentPaymentServiceServer(s grpc.ServiceRegistrar, srv StudentPaymentServiceServer) {
	s.RegisterService(&StudentPaymentService_ServiceDesc, srv)
}

func _StudentPaymentService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPaymentServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentPaymentService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPaymentServiceServer).GetByID(ctx, req.(*StudentPaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPaymentService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListStudentPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPaymentServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentPaymentService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPaymentServiceServer).GetList(ctx, req.(*GetListStudentPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPaymentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPaymentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentPaymentService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPaymentServiceServer).Create(ctx, req.(*CreateStudentPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPaymentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPaymentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentPaymentService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPaymentServiceServer).Update(ctx, req.(*UpdateStudentPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPaymentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPaymentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentPaymentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPaymentServiceServer).Delete(ctx, req.(*StudentPaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentPaymentService_ServiceDesc is the grpc.ServiceDesc for StudentPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "education_management_service.StudentPaymentService",
	HandlerType: (*StudentPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _StudentPaymentService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _StudentPaymentService_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StudentPaymentService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StudentPaymentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StudentPaymentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student_payment.proto",
}
