// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: login.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoginService_AdministarationLogin_FullMethodName = "/user_service.LoginService/AdministarationLogin"
	LoginService_ManagerLogin_FullMethodName         = "/user_service.LoginService/ManagerLogin"
	LoginService_StudentLogin_FullMethodName         = "/user_service.LoginService/StudentLogin"
	LoginService_SupportTeacherLogin_FullMethodName  = "/user_service.LoginService/SupportTeacherLogin"
	LoginService_TeacherLogin_FullMethodName         = "/user_service.LoginService/TeacherLogin"
	LoginService_SuperAdminLogin_FullMethodName      = "/user_service.LoginService/SuperAdminLogin"
)

// LoginServiceClient is the client API for LoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginServiceClient interface {
	AdministarationLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error)
	ManagerLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error)
	StudentLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error)
	SupportTeacherLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error)
	TeacherLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error)
	SuperAdminLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error)
}

type loginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginServiceClient(cc grpc.ClientConnInterface) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) AdministarationLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, LoginService_AdministarationLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) ManagerLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, LoginService_ManagerLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) StudentLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, LoginService_StudentLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) SupportTeacherLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, LoginService_SupportTeacherLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) TeacherLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, LoginService_TeacherLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) SuperAdminLogin(ctx context.Context, in *LoginPasswors, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, LoginService_SuperAdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServiceServer is the server API for LoginService service.
// All implementations must embed UnimplementedLoginServiceServer
// for forward compatibility
type LoginServiceServer interface {
	AdministarationLogin(context.Context, *LoginPasswors) (*Token, error)
	ManagerLogin(context.Context, *LoginPasswors) (*Token, error)
	StudentLogin(context.Context, *LoginPasswors) (*Token, error)
	SupportTeacherLogin(context.Context, *LoginPasswors) (*Token, error)
	TeacherLogin(context.Context, *LoginPasswors) (*Token, error)
	SuperAdminLogin(context.Context, *LoginPasswors) (*Token, error)
	mustEmbedUnimplementedLoginServiceServer()
}

// UnimplementedLoginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoginServiceServer struct {
}

func (UnimplementedLoginServiceServer) AdministarationLogin(context.Context, *LoginPasswors) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdministarationLogin not implemented")
}
func (UnimplementedLoginServiceServer) ManagerLogin(context.Context, *LoginPasswors) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerLogin not implemented")
}
func (UnimplementedLoginServiceServer) StudentLogin(context.Context, *LoginPasswors) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentLogin not implemented")
}
func (UnimplementedLoginServiceServer) SupportTeacherLogin(context.Context, *LoginPasswors) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportTeacherLogin not implemented")
}
func (UnimplementedLoginServiceServer) TeacherLogin(context.Context, *LoginPasswors) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherLogin not implemented")
}
func (UnimplementedLoginServiceServer) SuperAdminLogin(context.Context, *LoginPasswors) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAdminLogin not implemented")
}
func (UnimplementedLoginServiceServer) mustEmbedUnimplementedLoginServiceServer() {}

// UnsafeLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServiceServer will
// result in compilation errors.
type UnsafeLoginServiceServer interface {
	mustEmbedUnimplementedLoginServiceServer()
}

func RegisterLoginServiceServer(s grpc.ServiceRegistrar, srv LoginServiceServer) {
	s.RegisterService(&LoginService_ServiceDesc, srv)
}

func _LoginService_AdministarationLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPasswors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).AdministarationLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_AdministarationLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).AdministarationLogin(ctx, req.(*LoginPasswors))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_ManagerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPasswors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).ManagerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_ManagerLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).ManagerLogin(ctx, req.(*LoginPasswors))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_StudentLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPasswors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).StudentLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_StudentLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).StudentLogin(ctx, req.(*LoginPasswors))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_SupportTeacherLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPasswors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).SupportTeacherLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_SupportTeacherLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).SupportTeacherLogin(ctx, req.(*LoginPasswors))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_TeacherLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPasswors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).TeacherLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_TeacherLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).TeacherLogin(ctx, req.(*LoginPasswors))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_SuperAdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPasswors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).SuperAdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_SuperAdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).SuperAdminLogin(ctx, req.(*LoginPasswors))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginService_ServiceDesc is the grpc.ServiceDesc for LoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdministarationLogin",
			Handler:    _LoginService_AdministarationLogin_Handler,
		},
		{
			MethodName: "ManagerLogin",
			Handler:    _LoginService_ManagerLogin_Handler,
		},
		{
			MethodName: "StudentLogin",
			Handler:    _LoginService_StudentLogin_Handler,
		},
		{
			MethodName: "SupportTeacherLogin",
			Handler:    _LoginService_SupportTeacherLogin_Handler,
		},
		{
			MethodName: "TeacherLogin",
			Handler:    _LoginService_TeacherLogin_Handler,
		},
		{
			MethodName: "SuperAdminLogin",
			Handler:    _LoginService_SuperAdminLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login.proto",
}
